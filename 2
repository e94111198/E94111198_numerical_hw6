import numpy as np

def find_inverse_detailed_no_print(matrix):
    """
    使用高斯-約旦消去法詳細計算矩陣的反矩陣，但不即時印出中間步驟。

    Args:
        matrix (numpy.ndarray): 要計算反矩陣的方陣。

    Returns:
        tuple: 包含所有步驟的增廣矩陣列表和最終的反矩陣 (numpy.ndarray 或 None)。
    """
    n = matrix.shape[0]
    if matrix.shape[0] != matrix.shape[1]:
        return [], None

    augmented_matrix = np.hstack((matrix, np.identity(n)))
    steps = [np.copy(augmented_matrix)]  # 儲存初始增廣矩陣

    for i in range(n):
        pivot = augmented_matrix[i, i]
        if np.isclose(pivot, 0):
            found_nonzero_row = False
            for j in range(i + 1, n):
                if not np.isclose(augmented_matrix[j, i], 0):
                    augmented_matrix[[i, j]] = augmented_matrix[[j, i]]
                    pivot = augmented_matrix[i, i]
                    steps.append(np.copy(augmented_matrix))
                    found_nonzero_row = True
                    break
            if not found_nonzero_row:
                return steps, None

        augmented_matrix[i] = augmented_matrix[i] / pivot
        steps.append(np.copy(augmented_matrix))

        for j in range(n):
            if i != j:
                factor = augmented_matrix[j, i]
                augmented_matrix[j] = augmented_matrix[j] - factor * augmented_matrix[i]
                steps.append(np.copy(augmented_matrix))

    inverse_matrix = augmented_matrix[:, n:]
    return steps, inverse_matrix

# 定義矩陣 A
A = np.array([[4, 1, -1, 0],
              [1, 3, -1, 0],
              [-1, -1, 6, 2],
              [0, 0, 2, 5]], dtype=float)

all_steps, inverse_A = find_inverse_detailed_no_print(A)

if inverse_A is not None:
    print("計算過程：")
    for i, step in enumerate(all_steps):
        print(f"步驟 {i}:")
        print(step)
        print("-" * 40)
    print("\n最終反矩陣：")
    print(inverse_A)
else:
    print("矩陣 A 不可逆，沒有反矩陣。")
